[build-system]
requires = ["setuptools>=64.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hatyan"
version = "2.10.0"
maintainers = [{ name = "Jelmer Veenstra", email = "jelmer.veenstra@deltares.nl" }]
description = "Tidal analysis and prediction tool of Rijkswaterstaat"
readme = "README.md"
keywords = ["hatyan", "tidal analysis", "tidal prediction"]
license = { text = "LGPLv3" }
requires-python = ">=3.9"
dependencies = [
	#scipy>=1.5.4 env creation succeeded in https://github.com/Deltares/hatyan/issues/71
	"scipy>=1.5.4",
	#numpy>=1.24.0 is oldest supported version in Q4 2024
	"numpy>=1.24.0",
	#matplotlib>=3.7.0 contour colorbar on uniform values succeeds
	"matplotlib>=3.7.0",
	#pandas>=2.1.0 has persistent max attrs (test_metadata_persistence)
	"pandas>=2.1.0",
	#netcdf4>=1.5.6 does not call numpy.bool (avoids AttributeError)
	"netcdf4>=1.5.6",
	#pyproj>=3.1.0 is pip installable in py38
	"pyproj>=3.1.0",
	#requests>=2.28.0 was tested on hmc
	"requests>=2.28.0",
	#xarray>=2023.4.0 does not conflict with pandas<2.0.0 for resampling
	"xarray>=2023.4.0",
	#rws-ddlpy>=0.5.0 supports timezones for input dates
	"rws-ddlpy>=0.5.0",
	#click>=7.1 is the first version available on github release page
	"click>=7.1",
]
classifiers = [
	"Development Status :: 5 - Production/Stable",
	"Intended Audience :: Science/Research",
	"Operating System :: OS Independent",
	"Topic :: Scientific/Engineering :: Information Analysis",
	"License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3.13",
]

[project.urls]
Home = "https://github.com/deltares/hatyan"
Code = "https://github.com/deltares/hatyan"
Issues = "https://github.com/deltares/hatyan/issues"

[project.optional-dependencies]
dev = [
	"bump2version>=0.5.11",
	"flake8",
	"pytest",
	"pytest-cov",
	"twine",
	"build",
]
docs = [
	"sphinx>=1.8.1",
	"sphinx_mdinclude",
	"nbsphinx",
	"pydata-sphinx-theme",
	#"pandoc", # installed with choco on github
]
examples = [
	"jupyter",
	"notebook",
]

[project.scripts]
hatyan = "hatyan.cli:cli"

[tool.setuptools.package-data]
hatyan = ["data/*"]

[tool.pytest.ini_options]
console_output_style = "count"
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "-v --tb=short --durations=0"
filterwarnings = [
	"error",
	"ignore::UserWarning",
	]
markers = [
	"unittest: mark a test as unittest. Used for testing single methods",
	"systemtest: mark a test as systemtest. Used for testing at a higher level, verifying a given input returns the expected output",
	"acceptance: mark a test as acceptance. Used for non-functional requirements and data that needs to be human-verified",
]

[tool.flake8]
exclude = "docs"