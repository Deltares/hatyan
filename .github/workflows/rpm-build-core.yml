# This is a basic workflow to help you get started with Actions

name: RPM-build-core

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    # branches: [ main ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
    build:
        name: Create RPM Release
        runs-on: ubuntu-latest

        steps:

        - name: Create Release
          id: create_release
          uses: actions/create-release@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: v2.3.1-alpha #${{ github.ref }}
            release_name: Release v2.3.1-alpha #${{ github.ref }}
            draft: false
            prerelease: true
        
        - name: Checkout code
          uses: actions/checkout@main
            
        - name: test python3 availability
          id: python3_test
          run: |
            python3 -m pip install --upgrade pip
          
        - name: build RPM package core
          id: rpm_build_core
          run: |
            versiontag=main #${{ github.ref }} #the versiontag is also internally stored in the specfile, this should be aligned with this one. Possible are main, branches, tags like v2.3.0
            # download spec from source and rpmbuild from spec
            rpmbuild -v -bb scripts/hatyan_python-latest_python3.spec --define "VERSIONTAG ${versiontag}"
            #echo "RPM was created: ${RPMTOPDIR}/RPMS/x86_64/*.rpm"
        
        - name: check RPM existence
          id: checkRPMexists
          run: |
            echo "test"
            ls -alF ~
            echo "test"
            ls -alF /home/runner/
            echo "test"
            ls -alF /home/runner/rpmbuild
            echo "test"
            ls -alF /home/runner/rpmbuild/RPMS/x86_64
            echo "test"
            
        - name: Upload Release Asset
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
              upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              asset_path: /home/runner/rpmbuild/RPMS/x86_64/hatyan_python-*.rpm #${{ steps.rpm_build.outputs.source_rpm_path }}
              asset_name: hatyan_python_rpm_#${{ github.ref }} #${{ steps.rpm_build.outputs.source_rpm_name }}
              asset_content_type: application/octet-stream #${{ steps.rpm_build.outputs.rpm_content_type }}
